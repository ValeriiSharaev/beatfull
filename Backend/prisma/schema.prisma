// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  hashedPassword String
  name  String
  description String?
  photo Photo?     @relation(fields: [photoId], references: [id])
  photoId   Int?  @unique
  posts Post[]
}

model Post {
  id        Int      @default(autoincrement()) @id
  title     String
  beat      Beat   @relation(fields: [beatId], references: [id])
  beatId    Int   @unique
  photo     Photo  @relation(fields: [photoId], references: [id])
  photoId    Int     @unique
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  tags TagsOnPosts[]
  genre Genre     @relation(fields: [genreId], references: [id])
  genreId Int
}

model Beat {
  id        Int      @default(autoincrement()) @id
  name      String   @unique
  post      Post?
}

model Tag {
  id        Int      @default(autoincrement()) @id
  name      String   @unique
  isVerified Boolean?
  posts TagsOnPosts[]
}

model TagsOnPosts {
  id        Int       @default(autoincrement()) @id
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
}

model Genre {
  id        Int      @default(autoincrement()) @id
  name      String   @unique
  isVerified Boolean?
  posts     Post[]
}


model Photo {
  id        Int      @default(autoincrement()) @id
  title     String   @unique
  post      Post?
  user      User?
}


